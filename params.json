{"name":"Ng-annotations","tagline":"angular wrapper based on annotations","body":"# ng-annotation\r\n###angular wrapper based on es7 annotations\r\n=======================\r\n\r\nNg-annotations is a small javascript library that helps to produce more structured angular applications using es6 classes and es7 decorators.  \r\nThis library was build with webpack in mind but should work well with the other transpilers/javascript supersets like babel or typescript (with es7 and es6 advanced features)\r\n\r\n------------\r\n\r\n#### Index:\r\n* [Installation](#install)\r\n* [Basic Usage](#busage)\r\n* [How it works](#howit)\r\n* [Utils](#utils):\r\n\t* [@inject](#d_inject)\r\n\t* [@autobind](#d_autobind)\r\n\t* [@attach](#d_attach)\r\n\t* [@conceal](#d_conceal)\r\n* [Components](#components):\r\n\t* [@controller](#d_controller)\r\n\t* [@service](#d_service)\r\n\t* [@factory](#d_factory)\r\n\t* [@directive](#d_directive)\r\n\t* [@animation](#d_animation)\r\n\t* [@config](#d_config)\r\n\t* [@run](#d_run)\r\n\t* [@filter](#d_filter)\r\n* [Wrappers](#wrappers):\r\n\t* [constant](#d_constant)\r\n\t* [value](#d_value)\r\n* [Modify and build](#modifBuild)\r\n\r\n\r\n\r\n------------\r\n\r\n### <a name=\"install\">Installation</a>\r\n#### `npm`\r\n`npm install --save ng-annotations`  \r\n#### `Bower`\r\n`bower install --save ng-annotations`  \r\n\r\n------------\r\n### <a name=\"busage\">Basic Usage</a>\r\n> all examples in this repo and below use the [babel-core](https://babeljs.io/) library as transpiler\r\n> you're free to use any other if it supports the es7 decorator feature.\r\n\r\n#### `webpack`  \r\n> a configuration example is available in the [webpack dev config](./webpack/webpack.dev.config.js)\r\n\r\n````javascript\r\nimport {service, inject} from 'node_modules/ng-annotations';\r\n\r\n@service()\r\n@inject('$http')\r\nexport default class MyService {\r\n\tcontroller($http) {\r\n\t\t/*do something*/\r\n\t}\r\n}\r\n````  \r\n\r\n#### `es6 files`  \r\n> a configuration example is available in the [gruntfile](./gruntfile.js)\r\n\r\n````javascript\r\nconst {controllerName, inject} = ngAnnotations;\r\n\r\n@controller('controllerName')\r\nexport default class theController {\r\n\tcontroller() {\r\n\t\t/*do something*/\r\n\t}\r\n}\r\n````\r\n------------\r\n\r\n### Informations\r\n> All the examples below will show you the webpack way.  \r\n> However, an implementation of the angular todolist with the basic es6 syntax is available in the [example/es6](./example/es6) folder \r\n\r\n\r\n### <a name=\"howit\">How it works:</a>\r\n> all component annotations add 3 properties and 1 method to the given class  \r\n> `$type`:   String.  the component type (controller, config, service...). Used by the `autodeclare` method.  \r\n> `$name`:  String. the component name used by angular. Used by the `autodeclare` method. \r\n> Useful if you want to use the import system with the dependency injection system.\r\n> With this method you'll avoid all hypothetical naming issues.\r\n\r\n````javascript\r\n/*file1.js*/\r\nimport {service} from 'node_modules/ng-annotations';\r\n\r\n@service()\r\nexport default class MyService {}\r\n\r\n\r\n/*file2.js*/\r\nimport {controller, inject} from 'node_modules/ng-annotations';\r\n\r\n// import {$name as myService} from './file1'; //before 0.1.6\r\nimport myService from './file1';\r\n\r\n@controller()\r\n@inject(myService)\r\nexport default class MyController {}\r\n````\r\n\r\n> `$component`: Object. the object/function used by angular, can be different than the original class (function wrap). Used by the `autodeclare` method.  \r\n> `autodeclare`: Function(**ngModule**). declares the current component to angular. (replaces the traditional `angular.module('...').controller('name', fn)`)  \r\n> the ngModule parameter can be a string (angular module name) or an angular module instance.  \r\n \r\n````javascript\r\n/*autodeclare way*/\r\nimport myService from './file1';\r\nimport myController from './file2';\r\n\r\nvar app = angular.module('app', []);\r\n// useful if you wanna use the import system with the module dependency injection system.\r\nexport app.name; \r\n\r\n[myService, myController].forEach(component => component.autodeclare(app));\r\n\r\n/*alternative*/\r\nimport myService from './file1';\r\nimport myController from './file2';\r\n\r\nvar app = angular.module('app', []);\r\nexport app.name; // useful if you wanna use the import system with the module dependency injection system.\r\n\r\napp.service(myService.$name, myService.$component);\r\napp.controller(myController.$name, myController.$component);\r\n\r\n/*without import*/\r\nimport {service} from 'node_modules/ng-annotations';\r\n\r\n@service()\r\nclass MyService {}\r\n\r\nMyService.autodeclare('moduleName');\r\n````\r\n\r\n\r\n### Available annotations\r\n------------\r\n\r\n## <a name=\"utils\">Utils</a>\r\n\r\n### <a name=\"d_inject\">`@inject`</a>\r\n> The inject annotation replaces the classical array syntax for declare a dependency injection  \r\n> Basically, it will feed the $inject property with the list of dependencies\r\n\r\n#### type: *function*\r\n#### target: *class and methods*\r\n#### Params:\r\n - **depsToInject**:    String|String[]|Component[]|Component.   component(s) to inject\r\n - **...otherDeps**: *(Optional)* ...Strings.\r\n\r\n#### Usage:\r\n````javascript\r\nimport {inject, service} from 'node_modules/ng-annotations';\r\nimport myFactory from '../factory';\r\n\r\n@service()\r\n@inject('$http','$q',myFactory) // could be @inject(['$http','$q',myFactory])\r\nexport default class CommunicationService {\r\n\tconstructor(http, $q, factory) {\r\n\t\tthis.http = http;\r\n\t\tthis.promise = $q;\r\n\t\tthis.factory = factory;\r\n\t}\r\n\tdo() {/*do something*/}\r\n}\r\n````\r\n\r\n#### Note:\r\n> The implicit dependency injection syntax is also available but shouldn't be used because of minification issues. \r\n\r\n#### Usage:\r\n````javascript\r\nimport {inject, service} from 'node_modules/ng-annotations';\r\n\r\n@service()\r\nexport default class CommunicationService {\r\n\tconstructor($http, $q) {\r\n\t\tthis.http = $http;\r\n\t\tthis.promise = $q;\r\n\t}\r\n\tdo() {/*do something*/}\r\n}\r\n````\r\n\r\n###<a name=\"d_autobind\">`@autobind`<a>\r\n> The autobind annotation gives the possibility to bind methods to its current context.  \r\n> similar to *object.method.bind(object)*\r\n\r\n#### type: *statement*\r\n#### target: *method only*\r\n#### Usage:\r\n````javascript\r\nimport {service, inject, autobind} from 'node_modules/ng-annotations';\r\n\r\n@service()\r\n@inject('$timeout')\r\nexport default class CommunicationService {\r\n\r\n\tconstructor(timeout) {\r\n\t\tthis.timeout = timeout;\r\n\t\tthis.loop();\r\n\t}\r\n\r\n\t@autobind\r\n\tloop() {\r\n\t\tconsole.log('hello');\r\n\t\tthis.timeout(this.loop, 1000);\r\n\t}\r\n}\r\n````\r\n\r\n###<a name=\"d_attach\">`@attach`</a>\r\n> The attach annotation provides a shortcut to bind references across components and keep them safe.\r\n\r\n#### type: *function*\r\n#### target: *attributes and methods*\r\n#### Params:\r\n - **source**   String|Component. source component\r\n    - \"this\" will target the current component\r\n - **path**:    *(Optional)* String. path toward the property\r\n\t- split with dots. `obj.otherObj.myProperty`\r\n\r\n####Usage:\r\n\r\n````javascript\r\n// factories/user.js\r\nimport {factory, inject} from 'node_modules/ng-annotations';\r\n\r\n@factory()\r\n@inject('$http')\r\nexport default class User {\r\n\tconstructor() {\r\n\t\tthis.nested.property = 5;\r\n\t}\r\n\tconnectedUsers = 0;\r\n\tthis.users = [];\r\n\tload() {\r\n\t\tthis.$http.get('...').success(userlist => this.users = userlist)\r\n\t}\r\n}\r\n\r\n\r\n// controller/user.js\r\nimport {inject,controller,attach} from 'node_modules/ng-annotations';\r\nimport UserFactory from '../factories/user.js';\r\n\r\n@controller()\r\n@inject(UserFactory)\r\nclass FooBarController {\r\n\t@attach(UserFactory, 'users') // this.userlist will refers to UserFactory.users\r\n\tuserlist;\r\n\r\n\t@attach(UserFactory, 'nested.property')\r\n\trandomProperty;\r\n\r\n\t@attach(UserFactory, 'load') // same as this.reload = factory.load.bind(factory);\r\n\treload;\r\n\t\r\n\tclearUsers() {\r\n\t\tthis.users = []; // update the UserFactory.users property, the reference is kept.\r\n\t}\r\n}\r\n````\r\n\r\n#### Note:\r\n> binded target can be a function, a primitive or an object\r\n\r\n#### Warning:\r\n> The binding occurs after the constructor calling, so you can't use the property at this step. use the controller parameters instead.\r\n\r\n### <a name=\"d_conceal\">`@conceal`<a>\r\n> the conceal decorator provides a way to declare the annotated properties as private\r\n\r\n#### type: *statement*\r\n#### target: *methods and attributes*\r\n#### Usage:\r\n````javascript\r\nimport {factory, inject, attach, conceal} from 'node_modules/ng-annotations';\r\n\r\n@factory()\r\n@inject('$http')\r\nexport default class UserFactory {\r\n\r\n\t@conceal\r\n\t@attach('$http')\r\n\t$http\r\n\t\r\n\t@conceal\r\n\tdatas = [];\r\n\t\r\n\tconstructor(timeout) {\r\n\t\tthis.datas = [1,2,3];\r\n\t}\r\n\r\n\tmethod() {\r\n\t\treturn this.privateMethod();\r\n\t}\r\n\r\n\t@conceal\r\n\tprivateMethod() {}\r\n}\r\n````\r\n------------\r\n\r\n## <a name=\"components\">Components</a>\r\n\r\n###<a name=\"d_controller\">`@controller`</a>\r\n> declare the given class as an angular controller\r\n\r\n#### type: *function*\r\n#### Params:\r\n - **name**: *(Optional)*    String.   angular controller name, by default the decorator will take the class name.\r\n\r\n#### Usage:\r\n````javascript\r\nimport {controller} from 'node_modules/ng-annotations';\r\n\r\n@controller('HelloWorld')\r\nexport default class MyController {\r\n\tprop = 0;\r\n}\r\n````\r\n\r\n#### Note:\r\n> With this syntax you should always use the controllerAs option and forget $scope (except in certain cases like $watch or $on usages).\r\n\r\n#### Usage:\r\n````jade\r\nhtml\r\n\thead\r\n\tbody\r\n\t\tsection(ng-controller=\"HelloWorld as HW\") {{HW.prop}}\r\n\t\tscript(src=\"app.js\")\r\n````\r\n\r\n###<a name=\"d_service\">`@service`</a>\r\n> declare the given class as an angular service\r\n\r\n#### type: *function*\r\n#### Params:\r\n - **name**: *(Optional)*    String.   angular service name, by default the decorator will take the class name.\r\n\r\n#### Usage:\r\n````javascript\r\nimport {service} from 'node_modules/ng-annotations';\r\n\r\n@service('OtherName')\r\nexport default class MyService {\r\n\tmethod() { return 100 * Math.random()|0\t}\r\n}\r\n````\r\n\r\n###`@provider`\r\n> declare the given class as an angular provider  \r\n> like the native angular provider you must implement a `$get`. \r\n\r\n#### type: *function*\r\n#### Params:\r\n - **name**: *(Optional)*    String.   angular provider name, by default the decorator will take the class name.\r\n\r\n#### Usage:\r\n````javascript\r\nimport {provider, inject} from 'node_modules/ng-annotations';\r\n\r\n@provider()\r\nexport default class MyProvider {\r\n\t@inject($http)\r\n\t$get($http) {}\r\n}\r\n````\r\n\r\n###<a name=\"d_factory\">`@factory`</a>\r\n> declare the given class as an angular factory\r\n\r\n#### type: *function*\r\n#### Params:\r\n - **name**: *(Optional)*    String.   angular factory name, by default the decorator will take the class name.\r\n\r\n#### Usage:\r\n````javascript\r\nimport {factory} from 'node_modules/ng-annotations';\r\n\r\n@factory()\r\nexport default class MyFactory {\r\n\titems;\r\n\tconstructor() {\r\n\t\tthis.items = [];\r\n\t}\r\n}\r\n````\r\n\r\n> by default the decorator return an instance of the factory class to angular\r\n> so the example above is similar to the following code\r\n\r\n````javascript\r\nangular.module('...')\r\n\t.factory('MyFactory', function() {\r\n\t\tthis.items = [];\r\n\t\treturn angular.extend(this);\r\n\t})\r\n````\r\n\r\n> You can change this behaviour by defining an `expose` method \r\n\r\n````javascript\r\nimport {factory, autobind} from 'node_modules/ng-annotations';\r\n\r\n@factory()\r\nexport default class MyFactory {\r\n\titems;\r\n\t\r\n\t@autobind\r\n\tget() {\r\n\t\treturn this.items;\r\n\t}\r\n\t\r\n\t@autobind\r\n\tload(list = []) {\r\n\t\tthis.items = list;\r\n\t}\r\n\t\r\n\t$expose() {\r\n\t\treturn {\r\n\t\t\tload: this.load,\r\n\t\t\tget: this.get\r\n\t\t}\r\n\t}\r\n}\r\n\r\nangular.module('...')\r\n\t.factory('MyFactory', function() {\r\n\t\tthis.items = [];\r\n\t\t\r\n\t\tthis.get = function() { return this.items; }\r\n\t\tthis.load = function(list) { this.items = list || []; }\r\n\t\t\r\n\t\treturn {\r\n\t\t\tget: this.get.bind(this),\r\n\t\t\tload: this.load.bind(this)\r\n\t\t}\r\n\t})\r\n````\r\n\r\n###<a name=\"d_directive\">`@directive`</a>\r\n> declare the given class as an angular directive\r\n\r\n#### type: *function*\r\n#### Params:\r\n - **name**: *(Optional)*    String.   angular directive name, by default the decorator will take the class name.\r\n\r\n#### Usage:\r\n````javascript\r\nimport {directive} from 'node_modules/ng-annotations';\r\n\r\n@directive('myDirective')\r\nexport default class MyDirective {\r\n\trestrict = 'A';\r\n\tscope = {};\r\n\tlink($scope, elem, attr) {\r\n\t\tconsole.log('directive triggered');;\r\n\t}\r\n}\r\n````\r\n\r\n###<a name=\"d_animation\">`@animation`</a>\r\n> declare the given class as an angular animation\r\n\r\n#### type: *function*\r\n#### Params:\r\n - **selector**:    String.   css selector.\r\n\r\n#### Usage:\r\n````javascript\r\nimport {animation} from 'node_modules/ng-annotations';\r\n\r\n@animation('.foobar')\r\nexport default class FoobarAnimation {\r\n\tenter(elem, done) {\r\n\t\telem.css('opacity', 0);\r\n\t\t/*do something*/\r\n\t}\r\n\r\n\tleave(elem, done) {\r\n\t\telem.css('opacity', 1);\r\n\t\t/*do something*/\r\n\t}\r\n}\r\n````\r\n\r\n###<a name=\"d_config\">`@config`</a>\r\n> declare the given class as an angular config\r\n\r\n#### type: *function*\r\n#### Usage:\r\n````javascript\r\nimport {config, inject} from 'node_modules/ng-annotations';\r\n\r\n@config()\r\n@inject('$routeProvider')\r\nexport default class FooBarConfiguration {\r\n\t\r\n\tconstructor(routeProvider) {\r\n\t\tthis.route = routeProvider;\r\n\t\tthis.setRoutes();\r\n\t}\r\n\t\r\n\tsetRoutes() {\r\n\t\tthis.route.when('/xxx', { template: '...' })\r\n\t}\r\n\t\r\n}\r\n````\r\n\r\n###<a name=\"d_run\">`@run`</a>\r\n> declare the given class as an angular run\r\n\r\n#### type: *function*\r\n#### Usage:\r\n````javascript\r\nimport {run, inject} from 'node_modules/ng-annotations';\r\n\r\n@run()\r\n@inject('myFactory')\r\nexport default class SomeRun {\r\n\t\r\n\tconstructor(myFactory) {\r\n\t\tthis.fact = myFactory;\r\n\t\tthis.initModel();\r\n\t}\r\n\t\r\n\tinitModel() {\r\n\t\tthis.fact.load();\r\n\t}\r\n\t\r\n}\r\n````\r\n\r\n###<a name=\"d_filter\">`@filter`</a>\r\n> declare the given class as an angular filter\r\n\r\n#### type: *function*\r\n#### Params:\r\n - **properties**: *(Optional)*    Object|String.   angular filter properties. contains the name and the stateful attribute\r\n    - name: String. angular filter name, by default the decorator will take the class name.\r\n    - stateful: Boolean. default false\r\n\r\n#### Usage:\r\n> The decorated filter is slightly different than the original.\r\n> to make it work you need to implement a `$filter` method. This is the method used by angular.\r\n\r\n````javascript\r\nimport {filter} from 'node_modules/ng-annotations';\r\n\r\n@filter('capitalizeFilter')\r\nexport default class Capitalize {\r\n\t\r\n\ttoCapitalize(val) {\r\n\t\treturn val[0].toUpperCase() + val.slice(1);\r\n\t}\r\n\r\n\t$filter(val) {\r\n\t\treturn this.toCapitalize(val);\r\n\t}\r\n}\r\n````\r\n\r\n#### Note:\r\n> If you need to write a stateful filter, you must give a literal objet as parameter to the filter decorator\r\n\r\n````javascript\r\n//inspired by https://docs.angularjs.org/guide/filter\r\nimport {filter, inject, attach} from 'node_modules/ng-annotations';\r\n\r\n@filter({name:'decorate', stateful:true})\r\n@inject('decoration')\r\nexport default Decorate {\r\n\r\n\t@attach('decoration', 'symbol')\r\n\tdecorator;\r\n\r\n\t$filter(input) {\r\n\t\treturn this.decorator + input + this.decorator;\r\n\t}\r\n}\r\n````\r\n\r\n## <a name=\"wrappers\">Wrappers</a>\r\n> the *Value* and *Constant* components can't be replaced by a class.  \r\n> In order to simplify their declaration two wrappers are available.\r\n\r\n###<a name=\"d_constant\">`constant`</a>\r\n#### Params:\r\n - **name**:    String.   constant name.\r\n - **value**:    Mix.   constant value.\r\n\r\n#### Usage:\r\n````javascript\r\nimport {constant} from 'node_modules/ng-annotations';\r\n\r\nexport default constant('name', 'a constant');\r\n````\r\n###<a name=\"d_value\">`value`</a>\r\n#### Params:\r\n - **name**:    String.   value name.\r\n - **value**:    Mix.   value value.\r\n\r\n#### Usage:\r\n````javascript\r\nimport {value} from 'node_modules/ng-annotations';\r\n\r\nexport default value('name', 'a value');\r\n````\r\n\r\n\r\n### <a name=\"modifBuild\">Modify and build</a>\r\n--------------------\r\n\r\n`npm install webpack-dev-server -g`  \r\n`npm install webpack`  \r\n`npm install`  \r\n\r\n*Build dist version:* `npm run build`  \r\n*Build es6 example:* `npm run es6`  \r\n*Start the dev server:* `npm run dev` then go to *http://localhost:8080/webpack-dev-server/*  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}